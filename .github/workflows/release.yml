name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          fi
          
      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from commits
          echo "## What's Changed" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            git log --pretty=format:"* %s by @%an" >> CHANGELOG.md
          else
            git log ${LAST_TAG}..HEAD --pretty=format:"* %s by @%an" >> CHANGELOG.md
          fi
          
          echo "" >> CHANGELOG.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${LAST_TAG}...v${{ steps.version.outputs.version }}" >> CHANGELOG.md
          
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: Release v${{ steps.version.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}

  build-artifacts:
    name: Build Release Artifacts
    runs-on: ${{ matrix.os }}
    needs: create-release
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [20]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          
      - name: Create standalone build
        run: |
          # Create standalone Next.js build
          npm run build:standalone
          
      - name: Package artifacts
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a -tzip neuroquest-${{ needs.create-release.outputs.version }}-windows.zip .next standalone package.json
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            tar -czf neuroquest-${{ needs.create-release.outputs.version }}-macos.tar.gz .next standalone package.json
          else
            tar -czf neuroquest-${{ needs.create-release.outputs.version }}-linux.tar.gz .next standalone package.json
          fi
        shell: bash
        
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./neuroquest-${{ needs.create-release.outputs.version }}-${{ matrix.os == 'ubuntu-latest' && 'linux' || matrix.os == 'windows-latest' && 'windows' || 'macos' }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
          asset_name: neuroquest-${{ needs.create-release.outputs.version }}-${{ matrix.os == 'ubuntu-latest' && 'linux' || matrix.os == 'windows-latest' && 'windows' || 'macos' }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
          asset_content_type: ${{ matrix.os == 'windows-latest' && 'application/zip' || 'application/gzip' }}

  docker-release:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/neuroquest:latest
            ${{ secrets.DOCKER_USERNAME }}/neuroquest:${{ needs.create-release.outputs.version }}
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ needs.create-release.outputs.version }}
          build-args: |
            VERSION=${{ needs.create-release.outputs.version }}
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: create-release
    if: github.event.inputs.prerelease != 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Update package version
        run: |
          npm version ${{ needs.create-release.outputs.version }} --no-git-tag-version
          
      - name: Build package
        run: npm run build
        
      - name: Publish to NPM
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, build-artifacts, docker-release]
    if: always()
    
    steps:
      - name: Send Discord notification
        if: success()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{
              \"content\": \"ðŸŽ‰ **NeuroQuest v${{ needs.create-release.outputs.version }} Released!**\",
              \"embeds\": [{
                \"title\": \"Release Notes\",
                \"url\": \"https://github.com/${{ github.repository }}/releases/tag/v${{ needs.create-release.outputs.version }}\",
                \"color\": 5814783,
                \"fields\": [
                  {
                    \"name\": \"Version\",
                    \"value\": \"v${{ needs.create-release.outputs.version }}\",
                    \"inline\": true
                  },
                  {
                    \"name\": \"Docker Image\",
                    \"value\": \"docker pull ${{ secrets.DOCKER_USERNAME }}/neuroquest:${{ needs.create-release.outputs.version }}\",
                    \"inline\": false
                  }
                ]
              }]
            }" \
            $DISCORD_WEBHOOK
            
      - name: Send Slack notification
        if: success()
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "ðŸŽ‰ NeuroQuest v${{ needs.create-release.outputs.version }} has been released!",
              "attachments": [
                {
                  "color": "good",
                  "fields": [
                    {
                      "title": "Version",
                      "value": "v${{ needs.create-release.outputs.version }}",
                      "short": true
                    },
                    {
                      "title": "Release URL",
                      "value": "<https://github.com/${{ github.repository }}/releases/tag/v${{ needs.create-release.outputs.version }}|View Release>",
                      "short": true
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}